// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum Role {
  ADMIN
  TESTER
  REVIEWER
}

// Enum for review statuses
enum ReviewStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
}

// Enum for test run statuses
enum TestRunStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum for test case statuses inside a test run
enum TestCaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// Enum for test case results inside a test run
enum TestCaseResult {
  PASSED
  FAILED
  BLOCKED
  SKIPPED
  RETEST
  UNTESTED
}

// Model for Users
model User {
  id             String      @id @default(uuid())
  username       String      @unique
  email          String      @unique
  password       String
  role           Role
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  testCases      TestCase[]  @relation("TestCaseCreator")
  reviews        Review[]    @relation("Reviewer")
  testRuns       TestRun[]   @relation("TestRunExecutor")
  TestSuite      TestSuite[]
  UserRole       UserRole[]
  createdReviews Review[]    @relation("ReviewCreator")
}

// Model for Test Cases
model TestCase {
  id                String             @id @default(uuid())
  title             String
  description       String
  steps             String[]
  expectedOutcome   String
  createdBy         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  creator           User               @relation("TestCaseCreator", fields: [createdBy], references: [id])
  reviews           Review[]
  testRuns          TestRunTestCase[]
  linkedJiraTickets LinkedJiraTicket[]
  TestSuite         TestSuite[]        @relation("TestSuiteTestCases")
}

// Model for Test Suites
model TestSuite {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creator     User       @relation(fields: [createdBy], references: [id])
  testCases   TestCase[] @relation("TestSuiteTestCases")
  testRuns    TestRun[]
}

// Model for Reviews
model Review {
  id         String       @id @default(uuid())
  testCaseId String
  reviewerId String
  status     ReviewStatus
  comments   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  testCase   TestCase     @relation(fields: [testCaseId], references: [id])
  reviewer   User         @relation("Reviewer", fields: [reviewerId], references: [id])
  creator    User         @relation("ReviewCreator", fields: [createdBy], references: [id])
  createdBy  String
}

// Model for Linked Jira Tickets
model LinkedJiraTicket {
  id            String   @id @default(uuid())
  testCaseId    String
  jiraTicketId  String
  jiraTicketUrl String
  jiraStatus    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  testCase      TestCase @relation(fields: [testCaseId], references: [id])
}

// Model for Test Runs
model TestRun {
  id            String            @id @default(uuid())
  name          String
  testSuiteId   String
  executedBy    String
  status        TestRunStatus
  executionTime String?
  comments      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  testSuite     TestSuite         @relation(fields: [testSuiteId], references: [id])
  executor      User              @relation("TestRunExecutor", fields: [executedBy], references: [id])
  testCases     TestRunTestCase[]
}

// Model for the many-to-many relationship between Test Runs and Test Cases
model TestRunTestCase {
  testRunId     String
  testCaseId    String
  status        TestCaseStatus // New field for tracking test case execution status
  result        TestCaseResult? // Updated to use an enum instead of a string
  executionTime Int?
  comments      String?
  testRun       TestRun         @relation(fields: [testRunId], references: [id])
  testCase      TestCase        @relation(fields: [testCaseId], references: [id])

  @@id([testRunId, testCaseId])
}

// Model for User Roles
model UserRole {
  id        String   @id @default(uuid())
  userId    String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
