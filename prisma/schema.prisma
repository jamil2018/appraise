generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TESTER
  REVIEWER
}

enum ReviewStatus {
  PENDING
  APPROVED
  CHANGES_REQUESTED
}

enum TestRunStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TestCaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TestCaseResult {
  PASSED
  FAILED
  BLOCKED
  SKIPPED
  RETEST
  UNTESTED
}

enum TestCaseTemplateStepType {
  ACTION
  ASSERTION
  FLOW_CONTROL
}

enum ParamType {
  NUMBER
  STRING
  DATE
  BOOLEAN
}

model User {
  id             String      @id @default(uuid())
  username       String      @unique
  email          String      @unique
  password       String
  role           Role
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  testCases      TestCase[]  @relation("TestCaseCreator")
  reviews        Review[]    @relation("Reviewer")
  testRuns       TestRun[]   @relation("TestRunExecutor")
  TestSuite      TestSuite[]
  UserRole       UserRole[]
  createdReviews Review[]    @relation("ReviewCreator")
}

model TestCase {
  id                String                 @id @default(uuid())
  title             String
  description       String
  createdBy         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  creator           User                   @relation("TestCaseCreator", fields: [createdBy], references: [id])
  reviews           Review[]
  testRuns          TestRunTestCase[]
  linkedJiraTickets LinkedJiraTicket[]
  TestSuite         TestSuite[]            @relation("TestSuiteTestCases")
  steps             TestCaseTemplateStep[]
}

model TestSuite {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creator     User       @relation(fields: [createdBy], references: [id])
  testCases   TestCase[] @relation("TestSuiteTestCases")
  testRuns    TestRun[]
}

model Review {
  id         String       @id @default(uuid())
  testCaseId String
  reviewerId String
  status     ReviewStatus
  comments   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  testCase   TestCase     @relation(fields: [testCaseId], references: [id])
  reviewer   User         @relation("Reviewer", fields: [reviewerId], references: [id])
  creator    User         @relation("ReviewCreator", fields: [createdBy], references: [id])
  createdBy  String
}

model LinkedJiraTicket {
  id            String   @id @default(uuid())
  testCaseId    String
  jiraTicketId  String
  jiraTicketUrl String
  jiraStatus    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  testCase      TestCase @relation(fields: [testCaseId], references: [id])
}

model TestRun {
  id            String            @id @default(uuid())
  name          String
  testSuiteId   String
  executedBy    String
  status        TestRunStatus
  executionTime String?
  comments      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  testSuite     TestSuite         @relation(fields: [testSuiteId], references: [id])
  executor      User              @relation("TestRunExecutor", fields: [executedBy], references: [id])
  testCases     TestRunTestCase[]
}

model TestRunTestCase {
  testRunId     String
  testCaseId    String
  status        TestCaseStatus
  result        TestCaseResult?
  executionTime Int?
  comments      String?
  testRun       TestRun         @relation(fields: [testRunId], references: [id])
  testCase      TestCase        @relation(fields: [testCaseId], references: [id])

  @@id([testRunId, testCaseId])
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model TemplateStep {
  id                    String                   @id @default(uuid())
  name                  String // e.g., "Click Element", "Enter Text"
  description           String?
  type                  TestCaseTemplateStepType
  parameters            TemplateStepParameter[]
  signature             String
  functionDefinition    String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  testCaseTemplateSteps TestCaseTemplateStep[]
}

model TemplateStepParameter {
  id             String       @id @default(uuid())
  name           String
  type           ParamType
  order          Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  templateStep   TemplateStep @relation(fields: [templateStepId], references: [id])
  templateStepId String
}

model TestCaseTemplateStep {
  id             String       @id @default(uuid())
  testCaseId     String
  testCase       TestCase     @relation(fields: [testCaseId], references: [id])
  templateStepId String
  templateStep   TemplateStep @relation(fields: [templateStepId], references: [id])
  order          Int // Determined by React Flow
}
